{
	"Print to conaole":{
		"prefix": "leetcode_debug",    // 在新建立的页面中输入leetcode_debug就会有智能提示，Tab就自动生成好了
		"body": [
			"template<typename T>",
			"void change(const string&, T&, T(*)(string));",
			"",
			"#define VEC",
			"// #define LIS",
			"// #define TRE",
			"",
			"int main() {",
			"\tSolution solution;",
			"\tint a = 0, b = 0, c = 0;",
			"",
			"\tstring s1 = \"\";",
			"\tstring s2 = \"\";\t // 字符串",
			"\tstring st1 = \"\";",
			"\tstring st2 = \"\";\t// 用于转换的字符串",
			"\tstring ss = \"\";\t // 用于转换的高维字符串",
			"",
			"\twhile (getInput()) {",
			"\t\tchange(s1, s1, stringToString);",
			"\t\tchange(s2, s2, stringToString);",
			"#if defined(VEC)",
			"\t\tvector<int> v1, v2;",
			"\t\tvector<vector<int>> vv;",
			"\t\tchange(st1, v1, stringToIntegerVector);",
			"\t\tchange(st2, v2, stringToIntegerVector);",
			"\t\tchange(ss, vv, stringTo2dIntegerVector);",
			"#elif defined(LIS)",
			"\t\tListNode *lis1, *lis2;",
			"\t\tchange(st1, lis1, stringToListNode);",
			"\t\tchange(st2, lis2, stringToListNode);",
			"#elif defined(TRE)",
			"\t\tTreeNode *root1, *root2;",
			"\t\tchange(st1, root1, stringToTreeNode);",
			"\t\tchange(st2, root2, stringToTreeNode);",
			"#endif",
			"\t\t",
			"#ifdef DE_BUG",
			"\t\tauto ans = solution.$0();",
			"\t\tOUTPUT = &cout;",
			"\t\tdebug(ans)",
			"\t\tOUTPUT = &cerr;",
			"#endif",
			"\t}",
			"}",
			"",
			"template<typename T>",
			"void change(const string &s, T &v, T(*func)(string)) {",
			"\ttry {",
			"\t\tv = func(s);",
			"\t} catch (const exception& e) {",
			"\t\t// cerr << e.what() << endl;",
			"\t}",
			"}",
		],
		"description": "力扣debug模板"   // 用户输入后智能提示的内容
	}
}

